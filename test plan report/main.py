from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle

# Create document
doc = SimpleDocTemplate("Demoblaze_Test_Plan.pdf", pagesize=A4, rightMargin=30, leftMargin=30, topMargin=30, bottomMargin=18)
Story = []

styles = getSampleStyleSheet()
styles.add(ParagraphStyle(name="CustomHeading1", fontSize=14, leading=16, spaceAfter=10, spaceBefore=10))
styles.add(ParagraphStyle(name="CustomHeading2", fontSize=12, leading=14, spaceAfter=6, spaceBefore=6))
styles.add(ParagraphStyle(name="CustomBody", fontSize=10.5, leading=14))

def add_section(title, body):
    Story.append(Paragraph(title, styles["CustomHeading1"]))
    Story.append(Paragraph(body.strip().replace("\n", "<br/>"), styles["CustomBody"]))
    Story.append(Spacer(1, 12))

def add_table(data, col_widths=None):
    table = Table(data, colWidths=col_widths)
    table.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.black),
        ("FONTNAME", (0, 0), (-1, 0), "Helvetica-Bold"),
        ("ALIGN", (0, 0), (-1, -1), "LEFT"),
        ("VALIGN", (0, 0), (-1, -1), "TOP"),
    ]))
    Story.append(table)
    Story.append(Spacer(1, 12))

# Sections
add_section("1. Test Objectives", """
Automate and validate key user journeys in the Demoblaze application, such as:
- Login functionality (valid & invalid credentials)
- Product selection and cart addition
- Cart price verification and content assertion
- Error handling and screenshot logging
- Ensure regression stability by regularly executing critical smoke tests.
- Generate comprehensive reports (HTML + Excel) for analysis and tracking.
""")

add_section("2. Scope of Testing", """
In Scope:
- UI automation for:
  - Login Page
  - Home Page (Product Search)
  - Product Detail Page
  - Cart Page
  - Pop-up handling (alerts after add-to-cart or login)
  - Excel-based test result logging
  - Screenshot capture on pass/fail

Out of Scope:
- Payment gateway testing
- API testing
- Mobile responsiveness
- Performance or load testing
""")

add_section("3. Features to be Tested", "")
add_table([
    ["Feature", "Tests Involved", "Test File"],
    ["Login functionality", "Valid & invalid login credentials", "test_login.py"],
    ["Add to Cart", "Add Samsung Galaxy S6, check alert", "test_login_and_cart.py"],
    ["Product availability", "Search non-existent product (iPhone 16)", "test_login_and_cart.py"],
    ["Price assertion", "Verify Samsung Galaxy S6 price is $360", "test_price_assert.py"],
    ["Screenshot & Excel log", "On both pass/fail scenarios", "utils/helpers.py"],
    ["Pop-up/Alert validation", "Show/accept alerts at key stages", "utils/popup.py"]
], [130, 220, 150])

add_section("4. Test Deliverables", """
- test_cart_report.html: HTML report (auto-generated by PyTest)
- xl_report/test_results.xlsx: Structured Excel log for each test result
- Screenshots in /screenshots: For visual evidence
- Console logs via utils/logger.py
""")

add_section("5. Test Environment", "")
add_table([
    ["Component", "Details"],
    ["OS", "Windows 10 (64-bit)"],
    ["Browser", "Google Chrome (latest version)"],
    ["Python", "3.12.10"],
    ["Selenium", "WebDriver (latest via webdriver-manager)"],
    ["IDE", "VS Code"],
    ["Test Framework", "PyTest + Pytest-html plugin"],
    ["Excel Utility", "openpyxl for reading/writing .xlsx"]
], [120, 380])

add_section("6. Test Tools and Scripts", "")
add_table([
    ["Tool", "Purpose"],
    ["Selenium", "Browser automation"],
    ["PyTest", "Organize and run tests"],
    ["pytest-html", "Generate HTML reports"],
    ["openpyxl", "Handle Excel test logs"],
    ["logging module", "Capture info/error/debug logs"]
], [120, 380])

add_section("7. Roles & Responsibilities", "")
add_table([
    ["Role", "Responsibility"],
    ["Test Engineer", "Write test scripts, validate scenarios"],
    ["Automation Dev", "Build and structure POM-based test framework"],
    ["Reviewer/QA Lead", "Review scripts, verify coverage, approve plan"]
], [120, 380])

add_section("8. Entry & Exit Criteria", """
Entry:
- Application is up and running
- Valid user credentials provided
- Target product available (Samsung Galaxy S6)

Exit:
- All test cases executed
- Failures are logged, screenshot captured
- Test reports generated
""")

add_section("9. Pass/Fail Criteria", "")
add_table([
    ["Criteria", "Status"],
    ["All assertions pass", "PASS"],
    ["Assertion fails or alert not handled", "FAIL"],
    ["Element not found or exception raised", "FAIL"]
], [300, 200])

add_section("10. Risks and Mitigation", "")
add_table([
    ["Risk", "Mitigation"],
    ["Product name changes or disappears", "Use flexible locators (text + fallback)"],
    ["Alert/popup not loading properly", "Add wait or fallback to try-except"],
    ["Network/browser issues during execution", "Retry or rerun test cases"]
], [220, 280])

# Final build
doc.build(Story)
print("âœ… PDF generated: Demoblaze_Test_Plan.pdf")
